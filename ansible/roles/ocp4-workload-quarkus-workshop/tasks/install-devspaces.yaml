---
# deploy devspaces operator
- name: Create operator subscription for Dev Spaces
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/devspaces_subscription.yaml

# wait for CRD to be a thing
- name: Wait for Dev Spaces CRD to be ready
  k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: checlusters.org.eclipse.che
  register: r_devspaces_crd
  retries: 200
  delay: 10
  until: r_devspaces_crd.resources | list | length == 1

# deploy devspaces CR
- name: Create CR for Dev Spaces
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/devspaces_cr.yaml

- name: Wait for Dev Spaces CR to be ready
  shell: "oc get pod -n openshift-operators -l component=devspaces-dashboard --output=jsonpath='{.items[*].metadata.name}'"
  register: r_devspaces_dashboard_pod
  retries: 200
  delay: 10
  until: item in r_devspaces_dashboard_pod.stdout
  with_items:
    - devspaces-dashboard

- name: Import stack imagestream
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/stack_imagestream.yaml

- name: wait for stack to be a thing
  k8s_info:
    kind: ImageStream
    name: quarkus-stack
    namespace: openshift
  register: r_stack_is
  retries: 200
  delay: 10
  until: r_stack_is.resources | list | length == 1

- name: import stack image
  shell: |
    oc import-image --all quarkus-stack -n openshift

- name: Create a Dev SpaceS ImagePuller
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/devspaces_imagepuller.yaml

# - name: Pre-create and warm user workspaces
#   include_tasks: create_dev_workspace.yaml
#   vars:
#     user: "{{ item }}"
#   with_list: "{{ users }}"

- name: wait a minute and let the image download and be registered
  when: num_users | int > 0
  pause:
      minutes: 2

